%% -*- Erlang -*-
[
  "type SpawnOptOptions :: [(Atom | {Atom, Any})]."
, "type UntypedFun :: (..) -> .. ."

, "erlang:is_tuple :: (Any) -> Boolean."
, "erlang:list_to_integer :: ([Char]) -> Integer."
, "erlang:list_to_atom :: ([Char]) -> Atom."
, "erlang:integer_to_list :: (Integer) -> [Char]."
, "erlang:atom_to_list :: (Atom) -> [Char]."
, "erlang:element :: (Integer, {}) -> Any."
, "erlang:hd :: ([A]) -> A."
, "erlang:tl :: ([A]) -> [A]."

, "is_tuple :: (Any) -> Boolean."
, "is_integer :: (Any) -> Boolean."
, "list_to_integer :: ([Char]) -> Integer."
, "list_to_atom :: ([Char]) -> Atom."
, "integer_to_list :: (Integer) -> [Char]."
, "atom_to_list :: (Atom) -> [Char]."
, "element :: (Integer, {}) -> Any."
, "hd :: ([A]) -> A."
, "tl :: ([A]) -> [A]."

, "c:l :: (Atom) -> {module, Atom} | {error, Atom}."
, "avl_shell:l :: (Atom) -> {module, Atom} | {error, Atom}."
, "shell_defaults:i :: () -> ok."
, "avl_shell:i :: () -> ok."

, "spawn :: UntypedFun -> Pid."
, "spawn :: (Atom, UntypedFun) -> Pid."
, "spawn :: (Atom, Atom, [Any]) -> Pid."
, "spawn :: (Atom, Atom, Atom, [Any]) -> Pid."
, "spawn_link :: UntypedFun -> Pid."
, "spawn_link :: (Atom, UntypedFun) -> Pid."
, "spawn_link :: (Atom, Atom, [Any]) -> Pid."
, "spawn_link :: (Atom, Atom, Atom, [Any]) -> Pid."
, "spawn_monitor :: (UntypedFun) -> {Pid, Reference}."
, "spawn_monitor :: (Atom, Atom, [Any]) -> {Pid, Reference}."
, "spawn_opt :: (UntypedFun, SpawnOptOptions) -> Pid | {Pid, Reference}."
, "spawn_opt :: (Atom, UntypedFun, SpawnOptOptions) -> Pid | {Pid, Reference}."
, "spawn_opt :: (Atom, Atom, [Any], SpawnOptOptions) -> Pid | {Pid, Reference}."
, "spawn_opt :: (Atom, Atom, Atom, [Any], SpawnOptOptions) -> Pid | {Pid, Reference}."

, "erlang:spawn :: (UntypedFun) -> Pid."
, "erlang:spawn :: (Atom, UntypedFun) -> Pid."
, "erlang:spawn :: (Atom, Atom, [Any]) -> Pid."
, "erlang:spawn :: (Atom, Atom, Atom, [Any]) -> Pid."
, "erlang:spawn_link :: (UntypedFun) -> Pid."
, "erlang:spawn_link :: (Atom, UntypedFun) -> Pid."
, "erlang:spawn_link :: (Atom, Atom, [Any]) -> Pid."
, "erlang:spawn_link :: (Atom, Atom, Atom, [Any]) -> Pid."
, "erlang:spawn_monitor :: (UntypedFun) -> {Pid, Reference}."
, "erlang:spawn_monitor :: (Atom, Atom, [Any]) -> {Pid, Reference}."
, "erlang:spawn_opt :: (UntypedFun, SpawnOptOptions) -> Pid | {Pid, Reference}."
, "erlang:spawn_opt :: (Atom, UntypedFun, SpawnOptOptions) -> Pid | {Pid, Reference}."
, "erlang:spawn_opt :: (Atom, Atom, [Any], SpawnOptOptions) -> Pid | {Pid, Reference}."
, "erlang:spawn_opt :: (Atom, Atom, Atom, [Any], SpawnOptOptions) -> Pid | {Pid, Reference}."

, "lists:map :: ([A], (A -> B)) -> [B]."
, "lists:foldl :: (((A, ACC) -> ACC), ACC, [A]) -> ACC."
, "lists:foldr :: (((A, ACC) -> ACC), ACC, [A]) -> ACC."
, "lists:all :: ((A -> Boolean), [A]) -> Boolean."
, "lists:dropwhile :: ((A -> Boolean), [A]) -> [A]."

, "string:chars :: (Char, Integer) -> [Char]."

, "io:format :: ([Char], [Any]) -> ok."
].
